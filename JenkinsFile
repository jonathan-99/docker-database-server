pipeline {
    agent any

    stages {
        stage('Initialize') {
            steps {
                script {
                    // need to add a check on the image
                    sh """
                        echo "this is the git version ${sh(script: 'git --version', returnStdout: true).trim()}"
                        echo "this is the python version ${sh(script: 'python --version', returnStdout: true).trim()}"
                        echo "this is the ufw status ${sh(script: 'sudo ufw status', returnStdout: true).trim()}"
                        echo "this is the docker version ${sh(script: 'docker -v', returnStdout: true).trim()}"
                    """
                }
            }
        }

        stage('Check Versions') {
            steps {
                script {
                    // Additional version checks can be added here if needed
                }
            }
        }

        stage('Setup Checks') {
            steps {
                script {
                    sh """
                        file=jenkins_scripts/setup_checks.sh
                        chmod +x \$file
                        ls -l \$file
                        script -q -c ./\$file /dev/null
                    """
                }
            }
        }

        stage('Download and Install Docker Image with Dependencies') {
            steps {
                script {
                    sh """
                        file1='jenkins_scripts/do_download_and_install.sh'
                        chmod +x \$file1
                        filePermissions=\$(ls -l \$file1)
                        echo "File permissions: \$filePermissions"
                        script -q -c "./\$file1" /dev/null
                    """
                }
            }
        }

        stage('Unit Tests, PEP8, Coverage Report') {
            steps {
                script {
                    sh """
                        file2='jenkins_scripts/do_unittests.sh'
                        chmod +x \$file2
                        filePermissions=\$(ls -l \$file2)
                        echo "File permissions: \$filePermissions"
                        script -q -c "./\$file2" /dev/null
                    """
                }
            }
        }

        stage('Stop Docker Container') {
            steps {
                script {
                    sh """
                        file3='jenkins_scripts/close_docker.sh'
                        chmod +x \$file3
                        filePermissions=\$(ls -l \$file3)
                        echo "File permissions: \$filePermissions"
                        script -q -c "./\$file3" /dev/null
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo 'Cleaning up'
                    // Any cleanup steps if needed
                }
            }
        }
    }

    post {
        success {
            echo 'Build successful'
        }
        failure {
            echo 'Build failed'
        }
    }
}
